A criação de formulários costuma ser um pesadelo para vários desenvolvedores. Não pela dificuldade, mas sim pela quantidade de marcação que precisa ser gerada em alguns casos. O Spaghetti* já traz na instalação padrão um _helper_ para as principais tarefas relacionadas a formulários, o @FormHelper@.

O @FormHelper@ gera vários tipos diferentes de campos para seus formulários, todos com uma marcação padronizada e facilmente estilizável por CSS. Em vez de você precisar criar vários elementos @<div>@, @<label>@ e tudo o mais, o _helper_ já fará tudo isso por você.

h2(#form-helper/criando). Criando um formulário

Antes de começar a criar os campos de seu formulário é necessário criar a tag @<form>@, para que seu formulário possa ser submetido corretamente. Como o Spaghetti* precisa manipular o atributo @action@ de seu formulário para que a URL seja criada corretamente, usamos o método @FormHelper::create()@. Caso nenhum parâmetro seja passado para o método, será criado um formulário com o atributo @action@ apontando para a própria página em que o formulário foi criado. Para definir uma outra URL qualquer, é necessário passá-la como o primeiro parâmetro.

pre. echo $form->create("/users/login");
// => <form action="/users/login" method="post">

Por padrão, o @HtmlHelper@ assume que seus formulários usarão @method=post@. Entretanto, nada impede que você use @method=get@. Você pode fazer essa alteração passando um segundo parâmetro, um _array_ de atributos para o formulário. Além dos métodos comuns, o Spaghetti* também suporta um método @file@, que gerará um formulário de envio de arquivos.

pre. echo $form->create("/photos/upload", array("method" => "file"));
// => <form action="/photos/upload" method="post" enctype="multipart/form-data">

Assim como você precisa abrir o formulário, é necessário fechá-lo também. Você pode fazer isso através de @</form>@, ou através de @FormHelper::close()@. Sem receber nenhum parâmetro, a saída é o prório @</form>@, mas o _helper_ é capaz de um pouco mais que isso: você já pode gerar o botão de envio automaticamente.

Passando algum texto como primeiro parâmetro, @FormHelper@ criará uma tag @<button type="submit">@, com o texto do parâmetro como legenda do botão. Esse botão pode receber qualquer atributo, passando um _array_ contendo seus nomes e valores.

pre. echo $form->close("Enviar", array("class" => "send"));
// => <button type="submit" class="send">Enviar</button>

Também existe um atributo especial, chamado @tag@. Ele permite que você use outros tipos de botão além do padrão @<button>@. Você pode usar @input@ para criar um @<input type="submit" />@ ou @image@ para criar um @<input type="image" />@.

pre.. echo $form->close("Enviar", array("tag" => "input"));
// => <input type="submit" value="enviar" />

echo $form->close("Enviar", array(
	"tag" => "image",
	"src" => "input.png")
);
// => <input type="image" src="/images/input.png" alt="Enviar" />

h2(#form-helpers/campos). Inserindo campos

No Spaghetti*, apenas um método é usado diretamente para criar vários tipos diferentes de campos de formulário. @FormHelper::input()@ pode criar campos de texto e de senha, _combo boxes_, _checkboxes_, botões _radio_, entre outros, apenas com a modificação de um parâmetro.

@FormHelper::input()@ chamado com o primeiro parâmetro contendo o nome do campo gerará um campo de texto comum, mas já contendo toda a marcação auxiliar para estilização.

pre. echo $form->input("name");

O campo acima geraria a seguinte marcação, automaticamente:

pre(.brush: xml). <div class="input text">
	<label for="FormName">Name</label>
	<input id="FormName" type="text" name="name" />
</div>

Como você pode notar, o método já criou toda a estrutura necessária para o campo: uma @<div>@ externa, um @<label>@ já com conteúdo, e nosso campo propriamente dito.

Todos os campos gerados pelo @FormHelper@ tem basicamente a mesma estrutura. Mas isso não significa que você precisa se prender a ela. É possível modificar bastante essa estrutura através de um segundo parâmetro do método, um _array_ de atributos. Os atributos nesse _array_ serão passados diretamente para o @<input>@, exceto por alguns atributos especiais, vistos logo mais.

pre. echo $form->input("name", array("value" => "Spaghetti* Framework"));

@FormHelper::input()@ gera uma tag @<label>@ de acordo com o nome do campo a ser gerado. Se um campo se chamar @name@, seu _label_ será @Name@, se o campo se chamar @last_name@, o _label_ será @Last Name@, e assim por diante. Como nem sempre os nomes dos campos fazem sentido para o usuário, é possível alterar manualmente esse valor para que ele faça mais sentido. Isso é feito através do atributo especial @label@:

pre. echo $form->input("username", array("label" => "Nome de Usuário"));
// => <label for="FormUsername">Nome de Usuário</label>