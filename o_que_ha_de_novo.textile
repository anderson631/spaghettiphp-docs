Desde o lançamento da primeira versão do Spaghetti* em Janeiro de 2009, temos trabalhado bastante para trazer uma nova versão do framework, e desde então muita coisa mudou com o objetivo de tornar o Spaghetti* uma ferramenta mais efetiva, mais completa e de maior qualidade. Aqui você vai ver as principais mudanças que o Spaghetti* 0.2 trouxe. Esse texto não é um guia de migração, apenas uma listagem superficial de novos recursos ou de recursos que foram removidos. Para mais informações, visite o @changelog.txt@ da sua distribuição do Spaghetti*.

h2. Modelos

A principal  modificação na classe @Model@ foi a extinção dos métodos @Model::find()@ e @Model::findAll()@, em favor de seus novos substitutos @Model::first()@ e @Model::all()@. A passagem de parâmetros para esses métodos também foi redefinida para receber _arrays_ em vez de uma sequência de vários parâmetros.

pre. $this->Model->all(array(
	"conditions" => array(),
	"order" => "id ASC",
	"limit" => "1,10",
	"fields" => array(),
	"recursion" => -1
));

Outra grande modificação feita em @Model@ foi a remoção dos métodos relativos ao MySQL, sendo todos eles transportados para uma classe @MysqlDatasource@. Além de facilitar a manutenção e alteração de ambas as classes, isso permitirá que o suporte a novos bancos de dados sejam facilmente adicionados no futuro, bastando criar uma nova classe @Datasource@ e modificar as configurações necessárias.

Além dessas modificações às funcionalidades já existentes, a nova versão também traz vários novos métodos e propriedades para @Model@: @Model::toList()@ para listagem de resultados em _array_ no formato @id => displayField@, @Model::count()@ para contagem de resultados, @Model::begin()@, @Model::commit()@ e @Model::rollback@ para _transactions_, os _callbacks_ @Model::beforeSave()@ e @Model::afterSave()@, entre outros, todos descritos ao longo da documentação.

Também incluímos duas das _features_ mais pedidas para o Spaghetti*: paginação de resultados, através de @Model::paginate()@, e validação de entrada de dados, através de @Model::validate()@.

h2. _Controllers_

De tudo no Spaghetti*, a classe @Controller@ foi a que sofreu menos alterações desde o nosso primeiro lançamento. Dentre as alterações significantes, agora a classe mesclamos o conteúdo das variáveis @$_POST@ e @$_FILES@ em @Controller::data@, evitando que sejam necessárias chamadas diretas a superglobais na hora de fazer _upload_ de arquivos.

Também foi corrigido um bug em relação aos parâmetros passados para as _actions_: antigamente, mesmo que não fosse passado um valor numérico através da URL, o Spaghetti* passava um valor @null@ como primeiro parâmetro. Agora, só são passados parâmetros quando eles estão presentes na URL, caso contrário nada é passado.

Também foi corrigida uma pequena falha de segurança envolvendo métodos protegidos e privados dos _controllers_. Até a versão 0.1.2, qualquer método protegido ou privado era chamado como sendo uma _action_, não mostrando um erro @missingAction@, mas sim um erro do PHP, avisando que não é possível chamar métodos não públicos. Agora, quando um método não público é chamado, um erro @missingAction@ é mostrado.

h2. _Views_

As _views_ eram uma parte confusa no Spaghetti*. O código era ambíguo em vários lugares, e não seguiam as melhores práticas. Um bom exemplo disso é a variável global @$content_for_layout@, usada nos layouts. Agora, o conteúdo dessa variável é acessado através da variável de instância @View::contentForLayout@. Outras variáveis também foram incluídas através do @HtmlHelper@, @View::scriptsForLayout@ e @View::stylesForLayout@, que permitem que a inclusão de _scripts_ e folhas de estilo de dentro de uma view seja feita através do layout.

Tínhamos várias reclamações de usuários que não conseguiam usar os arquivos @.phtm@ do Spaghetti* em seus editores, por se tratar de um formato de arquivo nada comum. Pensando nisso, trocamos as extensões das _views_, layouts e _elements_ do Spaghetti* para o formato @.htm.php@. Assim como antes, outros formatos também podem ser criados para outros tipos de saída, como @.xml.php@, @.js.php@, entre outros. Acreditamos que a decisão deve fazer a vida de muitos um pouquinho mais fácil.

Não necessariamente ligado à _views_ em si, agora o Spaghetti* também traz uma nova tela de boas vindas, assim como novas telas de erro, todas com o mesmo _look and feel_ do nosso "site":http://spaghettiphp.org/, "fórum":http://forum.spaghettiphp.org/ e "_bug tracker_":http://dev.spaghettiphp.org/.

h2. _Helpers_

A classe @Helper@ permanece inalterada, mas temos algumas alterações envolvendo os _helpers_ providos com o Spaghetti*. Em @HtmlHelper@, além da correção de vários bugs, foi adicionado o parâmetro @$inline@ em @HtmlHelper::script()@ e @HtmlHelper::style()@, permitindo que a inclusão de _scripts_ e folhas de estilo possa ser feita com @View::scriptsForLayout@ e @View::stylesForLayout@, respectivamente. Ambos métodos também podem chamar os respectivos arquivos sem necessidade de definir a extensão, e vários arquivos podem ser passados na mesma chamada da função através de um _array_. Também foi incluído um método utilitário @HtmlHelper::imagelink()@, para criação de links com imagens.

Em @FormHelper@ as mudanças foram mais profundas.